// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	sarama "github.com/Shopify/sarama"
)

// SaramaConsumerGroupClaim is an autogenerated mock type for the SaramaConsumerGroupClaim type
type SaramaConsumerGroupClaim struct {
	mock.Mock
}

// HighWaterMarkOffset provides a mock function with given fields:
func (_m *SaramaConsumerGroupClaim) HighWaterMarkOffset() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// InitialOffset provides a mock function with given fields:
func (_m *SaramaConsumerGroupClaim) InitialOffset() int64 {
	ret := _m.Called()

	var r0 int64
	if rf, ok := ret.Get(0).(func() int64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int64)
	}

	return r0
}

// Messages provides a mock function with given fields:
func (_m *SaramaConsumerGroupClaim) Messages() <-chan *sarama.ConsumerMessage {
	ret := _m.Called()

	var r0 <-chan *sarama.ConsumerMessage
	if rf, ok := ret.Get(0).(func() <-chan *sarama.ConsumerMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *sarama.ConsumerMessage)
		}
	}

	return r0
}

// Partition provides a mock function with given fields:
func (_m *SaramaConsumerGroupClaim) Partition() int32 {
	ret := _m.Called()

	var r0 int32
	if rf, ok := ret.Get(0).(func() int32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int32)
	}

	return r0
}

// Topic provides a mock function with given fields:
func (_m *SaramaConsumerGroupClaim) Topic() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
